Notes2

strings

H E L L O \0

an array of chars

zero with a slash means "null set"

"String literal"

string literals may contain escape characters

"\" can be used to continue a string literal with a new line

string literal uses n + 1 bytes of memory

number of chars plus the null character

printf("abc");

Using MACROs for strings is useful

"puts"

printf


char *p;
p = "abc";


char ch;
ch = "abc"[1];
refers to "b"

char digit_to_hex_char(int digit){

return ...

}


char *p = "abc";

*p = 'd';

printf("\n");
printf('\n');

single quotes represent a character
double quotes represents a ??


##################
##################
#define STR_LEN 80
...
char str[STR_LEN+1];
adds 1 to the desired length of the string
adding 1 allows for the null char

COMMON PRACTICE
################
################

spaces are a char
char date1[8] = "June 14";



//


char date3[7] = "June 14";
unterminated string



char date[] = "June 14";

char *date = "June 14";

char *p; //doesnt allocate space

char str[STR_LEN+1]


char str[] = "Are we having fun yet?";
..?



printf("%.6s", string);

puts(str);
"put s"

scanf("%s", str);

reads the string and skips the white space

gets
"get s"



char sentence[SENT+LEN+1];

"  To C, or not to C: that is the quetion."

gets is specifically built for strings!

gets(sentence);

scans and gets have no way to detect when the array is full


======================
======================
BAG OF WORDS for extra credit!!!!
======================
======================



gets will store white space as part of an array...



int read_line(char str[], int n);


int read_line(char str[], int n){
int ch, i=0;

  while ((ch = getchar()) != '\n')
    if (i<n)
      str[i++] = ch;
  str[i] = '\0'; //terminate string
  return i; //num of chars stored

}


"flush()"


int (count_spaces(const)

....pointer arrithmetic



string.h


if (str1 == str2) //wrong

char *strcpy(char *s1, const char *s2);

returns s1 //a pointer to the destination string


strcpy(str2,"abcd");
strcpy(str1,str2);

no way to check string length

strncpy(str1,str2,sizeof(str1));


strncpy(str1,str2,sizeof(str1 - 1));
str1[sizeof(str1)-1] = '\0';

size_t strlen(const char *s);


int len;
len = strlen("abc");
len = strlen("");
...

strcpy(str1,"abc");
strcat(str1,"def");
strcpy(str1,"abc");
strcpy(str2,"ghi";
//
str2 contains "defghi")







char str[6] = "abc";
strcat(str1,)



strncat(str1,str2,sizeof(str1)- strlen ....)






//
