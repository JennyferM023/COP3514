1/5 of test 2 is POINTER ARITHMETIC


https://www.cs.umd.edu/class/sum2003/cmsc311/Notes/BitOp/pointer.html

http://www.tutorialspoint.com/cprogramming/c_pointer_arithmetic.htm

http://stackoverflow.com/questions/394767/pointer-arithmetic

String Idioms

size_t strlen(const char *s){

size_t n;

for (n = 0; *s != '\0'; s++)
  n++;

  OR

  while(*s)
    s++;

  return n;

  OR

  return s - p;
}



while (*s)
  s++;

  OR

  while(*s++)
    ...


    strcpy(str1,str2);


    char *strcat(char *s1, const char *s2){

char *p = s1;

while (*p != '\0')
  p++;

  while (*s2 ~= '\0'){

*p = *s2;



  }


    }


A pointer can point at anything

its when you call them is when the problem arises


Chapter 13 Pointer arithmetic
Chapter 13 Pointer arithmetic
Chapter 13 Pointer arithmetic
Chapter 13 Pointer arithmetic
Chapter 13 Pointer arithmetic
Chapter 13 Pointer arithmetic
Chapter 13 Pointer arithmetic
Chapter 13 Pointer arithmetic
Chapter 13 Pointer arithmetic
Chapter 13 Pointer arithmetic
Chapter 13 Pointer arithmetic

Anything that IS NOT ZERO evals to TRUE

EVEN negative numbers

RAGGED ARRAY or a SPARCE ARRAY

array of arrays


structs

Structure Variables

mixed types


//like int x;
struct{
int number;
char name[NAME_LEN+1];
int in_hand;
} part1;

// like int x,y;
struct{
int number;
char name[NAME_LEN+1];
int in_hand;
} part1,part2;




}




structs have block scope

structs have their own namespace



//
